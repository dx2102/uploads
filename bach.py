# %%
# !pip install moviepy==1.0.3 soundfile

# %%
import random
import numpy as np
import scipy
import matplotlib.pyplot as plt
%config InlineBackend.figure_format = 'retina'
from IPython.display import Audio

def approx(ratio, edo):
    # approximate a freq ratio to 12 edo
    if edo is None:
        return ratio
    semitone = np.log2(ratio) * edo
    semitone = round(semitone)
    return 2 ** (semitone / edo)

print(approx(3/2, None))
print(approx(3/2, 12))
print(approx(3/2, 31))

# %%

base_freq = 261.63
beat_duration = 0.2
sample_rate = 44100

song = [
    1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
    1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
    1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
    1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
    15/16, 9/8, 3/2, 9/4, 8/3, 3/2, 9/4, 8/3,
    15/16, 9/8, 3/2, 9/4, 8/3, 3/2, 9/4, 8/3,
    1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
    1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,

    1, 5/4, 5/3, 5/2, 10/3, 5/3, 5/2, 10/3,
    1, 5/4, 5/3, 5/2, 10/3, 5/3, 5/2, 10/3,
    1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
    1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
    15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
    15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
    15/16, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
    15/16, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
    
    5/6, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
    5/6, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
    9/16, 5/6, 9/8, 7/5, 2, 9/8, 7/5, 2,
    9/16, 5/6, 9/8, 7/5, 2, 9/8, 7/5, 2,
    3/4, 15/16, 9/8, 3/2, 15/8, 9/8, 3/2, 15/8,
    3/4, 15/16, 9/8, 3/2, 15/8, 9/8, 3/2, 15/8,

    3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
    3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
    2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
    2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
    2/3, 4/5, 9/8, 4/3, 15/8, 9/8, 4/3, 15/8,
    2/3, 4/5, 9/8, 4/3, 15/8, 9/8, 4/3, 15/8,
    5/8, 3/4, 1, 3/2, 2, 1, 3/2, 2,
    5/8, 3/4, 1, 3/2, 2, 1, 3/2, 2,

    5/8, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
    5/8, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
    5/9, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
    5/9, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
    3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
    3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
    1/2, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,
    1/2, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,

    1/2, 3/4, 9/10, 1, 5/4, 9/10, 1, 5/4,
    1/2, 3/4, 9/10, 1, 5/4, 9/10, 1, 5/4,
    1/3, 2/3, 5/6, 1, 5/4, 5/6, 1, 5/4,
    1/3, 2/3, 5/6, 1, 5/4, 5/6, 1, 5/4,
    7/20, 1/2, 5/6, 1, 6/5, 5/6, 1, 6/5,
    7/20, 1/2, 5/6, 1, 6/5, 5/6, 1, 6/5,
    2/5, 2/3, 15/16, 1, 9/8, 15/16, 1, 9/8,
    2/5, 2/3, 15/16, 1, 9/8, 15/16, 1, 9/8,

    3/8, 2/3, 3/4, 15/16, 9/8, 3/4, 15/16, 9/8,
    3/8, 2/3, 3/4, 15/16, 9/8, 3/4, 15/16, 9/8,
    3/8, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,
    3/8, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,
    3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
    3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
    3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
    3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,

    3/8, 3/5, 5/6, 1, 7/5, 5/6, 1, 7/5,
    3/8, 3/5, 5/6, 1, 7/5, 5/6, 1, 7/5,
    3/8, 5/8, 3/4, 1, 3/2, 3/4, 1, 3/2,
    3/8, 5/8, 3/4, 1, 3/2, 3/4, 1, 3/2,
    3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
    3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
    3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
    3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,

    1/4, 1/2, 3/4, 9/10, 5/4, 3/4, 9/10, 5/4, 
    1/4, 1/2, 3/4, 9/10, 5/4, 3/4, 9/10, 5/4, 
    1/4, 1/2, 2/3, 5/6, 1, 4/3, 1, 5/6, 
    1, 5/6, 2/3, 5/6, 2/3, 5/9, 2/3, 5/9,
    1/4, 15/32, 3/2, 15/8, 9/4, 8/3, 9/4, 15/8,
    9/4, 15/8, 3/2, 15/8, 9/8, 4/3, 5/4, 9/8,
    1,
]

piano = {}
N = 13
for i in range(1, N):
    piano[i] = 0
for i in range(1, N):
    piano[i] += 0.4 ** i
for i in range(1, N, 2):
    piano[i] += 0.5 ** i
piano[N - 3] *= 0.3
piano[N - 2] *= 0.1
piano[N - 1] *= 0.03
print(piano)

def render(song, edo=None):
    audio = np.zeros(int(sample_rate * beat_duration * (len(song) + 9)))

    for i, ratio in enumerate(song):
        note_duration = 6 * beat_duration
        t = np.linspace(0, note_duration, int(sample_rate * note_duration), endpoint=False)
        waves = 0 * t

        ratio = approx(ratio, edo)
        
        if ratio == 0:
            continue

        freq = base_freq * ratio
        # freq = base_freq * (1 / ratio)

        for harmonic, amp0 in piano.items():
            # phase = np.random.uniform(0, 0.25 * np.pi)
            phase = 0
            f = freq * harmonic
            if f > 261 * 80:
                raise ValueError(f"Frequency too high.")
            
            wave = amp0 * np.sin(2 * np.pi * f * t + phase)

            attack = int(sample_rate / freq * 0.5)
            decay = int(4 * beat_duration * sample_rate)
            wave[:attack] *= np.linspace(0, 1, attack)
            wave[-decay:] *= np.linspace(1, 0, decay)
            waves += wave
        waves *= 0.16 ** t

        dist = (len(song) - i) / 16
        if dist <= 1:
            waves *= (dist + 0.7) / 2

        start = int(i * sample_rate * beat_duration)
        end = start + len(waves)
        audio[start:end] += waves
    return audio

audio = render(song, edo=None)
Audio(audio, rate=sample_rate)


# %%
song_str = '''
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
15/16, 9/8, 3/2, 9/4, 8/3, 3/2, 9/4, 8/3,
15/16, 9/8, 3/2, 9/4, 8/3, 3/2, 9/4, 8/3,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,

1, 5/4, 5/3, 5/2, 10/3, 5/3, 5/2, 10/3,
1, 5/4, 5/3, 5/2, 10/3, 5/3, 5/2, 10/3,
1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
15/16, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
15/16, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,

5/6, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
5/6, 1, 5/4, 3/2, 2, 5/4, 3/2, 2,
9/16, 5/6, 9/8, 7/5, 2, 9/8, 7/5, 2,
9/16, 5/6, 9/8, 7/5, 2, 9/8, 7/5, 2,
3/4, 15/16, 9/8, 3/2, 15/8, 9/8, 3/2, 15/8,
3/4, 15/16, 9/8, 3/2, 15/8, 9/8, 3/2, 15/8,

3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
2/3, 4/5, 9/8, 4/3, 15/8, 9/8, 4/3, 15/8,
2/3, 4/5, 9/8, 4/3, 15/8, 9/8, 4/3, 15/8,
5/8, 3/4, 1, 3/2, 2, 1, 3/2, 2,
5/8, 3/4, 1, 3/2, 2, 1, 3/2, 2,

5/8, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
5/8, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
5/9, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
5/9, 2/3, 5/6, 1, 4/3, 5/6, 1, 4/3,
3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
1/2, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,
1/2, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,

1/2, 3/4, 9/10, 1, 5/4, 9/10, 1, 5/4,
1/2, 3/4, 9/10, 1, 5/4, 9/10, 1, 5/4,
1/3, 2/3, 5/6, 1, 5/4, 5/6, 1, 5/4,
1/3, 2/3, 5/6, 1, 5/4, 5/6, 1, 5/4,
7/20, 1/2, 5/6, 1, 6/5, 5/6, 1, 6/5,
7/20, 1/2, 5/6, 1, 6/5, 5/6, 1, 6/5,
2/5, 2/3, 15/16, 1, 9/8, 15/16, 1, 9/8,
2/5, 2/3, 15/16, 1, 9/8, 15/16, 1, 9/8,

3/8, 2/3, 3/4, 15/16, 9/8, 3/4, 15/16, 9/8,
3/8, 2/3, 3/4, 15/16, 9/8, 3/4, 15/16, 9/8,
3/8, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,
3/8, 5/8, 3/4, 1, 5/4, 3/4, 1, 5/4,
3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,

3/8, 3/5, 5/6, 1, 7/5, 5/6, 1, 7/5,
3/8, 3/5, 5/6, 1, 7/5, 5/6, 1, 7/5,
3/8, 5/8, 3/4, 1, 3/2, 3/4, 1, 3/2,
3/8, 5/8, 3/4, 1, 3/2, 3/4, 1, 3/2,
3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
3/8, 9/16, 3/4, 1, 4/3, 3/4, 1, 4/3,
3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,
3/8, 9/16, 3/4, 15/16, 4/3, 3/4, 15/16, 4/3,

1/4, 1/2, 3/4, 9/10, 5/4, 3/4, 9/10, 5/4, 
1/4, 1/2, 3/4, 9/10, 5/4, 3/4, 9/10, 5/4, 
1/4, 1/2, 2/3, 5/6, 1, 4/3, 1, 5/6, 
1, 5/6, 2/3, 5/6, 2/3, 5/9, 2/3, 5/9,
1/4, 15/32, 3/2, 15/8, 9/4, 8/3, 9/4, 15/8,
9/4, 15/8, 3/2, 15/8, 9/8, 4/3, 5/4, 9/8,
1,
'''

# %%

song1 = [
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
0, 0, 0, 0,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 10/9, 5/3, 20/9, 8/3, 5/3, 20/9, 8/3,
1, 10/9, 5/3, 20/9, 8/3, 5/3, 20/9, 8/3,
0, 0, 0, 0,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 9/8, 27/16, 9/4, 8/3, 27/16, 9/4, 8/3,
1, 9/8, 27/16, 9/4, 8/3, 27/16, 9/4, 8/3,
0, 0, 0, 0,

1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
0, 0, 0, 0,
1, 9/8, 45/32, 5/3, 9/4, 45/32, 5/3, 9/4,
1, 9/8, 45/32, 5/3, 9/4, 45/32, 5/3, 9/4,
15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
0, 0, 0, 0,

3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
0, 0, 0, 0,
3/4, 9/10, 5/4, 3/2, 25/12, 5/4, 3/2, 25/12,
3/4, 9/10, 5/4, 3/2, 25/12, 5/4, 3/2, 25/12,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
0, 0, 0, 0,
3/4, 9/10, 5/4, 3/2, 54/25, 5/4, 3/2, 54/25,
3/4, 9/10, 5/4, 3/2, 54/25, 5/4, 3/2, 54/25,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
0, 0, 0, 0,
]

audio1 = render(song1, edo=None)
Audio(audio1, rate=sample_rate)

# %%
song1_str = '''
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
1, 9/8, 5/3, 9/4, 8/3, 5/3, 9/4, 8/3,
0, 0, 0, 0,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 10/9, 5/3, 20/9, 8/3, 5/3, 20/9, 8/3,
1, 10/9, 5/3, 20/9, 8/3, 5/3, 20/9, 8/3,
0, 0, 0, 0,
1, 5/4, 3/2, 2, 5/2, 3/2, 2, 5/2,
1, 9/8, 27/16, 9/4, 8/3, 27/16, 9/4, 8/3,
1, 9/8, 27/16, 9/4, 8/3, 27/16, 9/4, 8/3,
0, 0, 0, 0,

1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
1, 9/8, 7/5, 5/3, 9/4, 7/5, 5/3, 9/4,
15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
0, 0, 0, 0,
1, 9/8, 45/32, 5/3, 9/4, 45/32, 5/3, 9/4,
1, 9/8, 45/32, 5/3, 9/4, 45/32, 5/3, 9/4,
15/16, 9/8, 3/2, 9/4, 3, 3/2, 9/4, 3,
0, 0, 0, 0,

3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
3/4, 9/10, 5/4, 3/2, 21/10, 5/4, 3/2, 21/10,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
0, 0, 0, 0,
3/4, 9/10, 5/4, 3/2, 25/12, 5/4, 3/2, 25/12,
3/4, 9/10, 5/4, 3/2, 25/12, 5/4, 3/2, 25/12,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
0, 0, 0, 0,
3/4, 9/10, 5/4, 3/2, 54/25, 5/4, 3/2, 54/25,
3/4, 9/10, 5/4, 3/2, 54/25, 5/4, 3/2, 54/25,
2/3, 5/6, 9/8, 5/3, 9/4, 9/8, 5/3, 9/4,
0, 0, 0, 0,
'''

# %%
import os
import soundfile as sf
from PIL import Image, ImageDraw, ImageFont
import moviepy.editor as mp

def find_font():
    search_paths = [
        os.path.join(os.environ.get('WINDIR', 'C:\\Windows'), 'Fonts'),
        '/Library/Fonts',
        '/System/Library/Fonts',
        os.path.expanduser('~/Library/Fonts'),
        '/usr/share/fonts/truetype',
        '/usr/local/share/fonts/truetype',
        '/usr/share/fonts/opentype',
        '/usr/local/share/fonts/opentype',
    ]

    search_fonts = [
        'FiraCode', 'Fira Mono', 'SourceCodePro',
        'Menlo', 'Consolas', 'UbuntuMono', 'NotoMono',
        'JetBrainsMono', 'Hack', 'Cascadia', 'DejaVuSansMono', 'RobotoMono',
        'monofur', 'LiberationMono', 'PT Mono', 'Inconsolata'
    ]

    os_fonts = []
    for path in search_paths:
        if not os.path.isdir(path):
            continue
        for root, _, files in os.walk(path):
            for file in files:
                if not file.lower().endswith(('.ttf', '.otf', '.ttc')):
                    continue
                os_fonts.append(os.path.join(root, file))
    
    for font in search_fonts:
        for font_path in os_fonts:
            if font.lower() in font_path.lower():
                print(f"Using font: {font} at {font_path}")
                return ImageFont.truetype(font_path, 60)
    print("No suitable font found, using default font.")
    return ImageFont.load_default(size=60)

font = find_font()



def get_video(name, audio, song_str):
    print(f"Generating video for {name}...")
    audio = audio / np.max(np.abs(audio)) * 0.5
    sf.write('prelude_audio.wav', audio, sample_rate)

    video_width = 1920
    video_height = 1080
    image_size = (video_width, video_height)
    beat_duration = 0.2

    import os
    if not os.path.exists("frames"):
        os.makedirs("frames")

    paragraphs = song_str.strip().split('\n\n')
    durations = []
    image_files = []

    for i, paragraph in enumerate(paragraphs):
        lines = [line.strip() for line in paragraph.split('\n') if line.strip()]
        cleaned_paragraph = "".join(lines)
        num_notes = cleaned_paragraph.count(',')
        
        duration = num_notes * beat_duration
        durations.append(duration)
        
        background_color, text_color = 'black', 'white'

        img = Image.new('RGB', image_size, color =background_color)
        d = ImageDraw.Draw(img)
        
        text_lines = [line for line in paragraph.split('\n') if line.strip()]
        text = '\n'.join(text_lines)
        
        bbox = d.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (video_width - text_width) / 2
        y = (video_height - text_height) / 2
        
        d.text((x, y), text, fill=text_color, font=font, spacing=10)
        
        image_file = f"frames/frame_{i:04d}.png"
        img.save(image_file)
        image_files.append(image_file)
        print(f"Generated frame {image_file} for paragraph {i}, duration: {duration:.2f}s")

    durations[0] -= 0.25
    durations[-1] += 2
    clips = []
    for i, image_file in enumerate(image_files):
        clip = mp.ImageClip(image_file).set_duration(durations[i])
        clips.append(clip)

    final_clip = mp.concatenate_videoclips(clips, method="compose")

    audio_clip = mp.AudioFileClip("prelude_audio.wav") 
    final_clip = final_clip.set_audio(audio_clip)

    output_filename = f"{name}.mp4"
    final_clip.write_videofile(output_filename, fps=30, codec="libx264")

    print(f"Video saved as {output_filename}")

# get_video("compare", audio1, song1_str)

# %%
get_video("pure", render(song, edo=None), song_str)
get_video("12edo", render(song, edo=12), song_str)
get_video("31edo", render(song, edo=31), song_str)

get_video("L_pure_R_12edo", np.stack([
    render(song, edo=None), render(song, edo=12)
], axis=1), song_str)
get_video("L_12edo_R_pure", np.stack([
    render(song, edo=12), render(song, edo=None)
], axis=1), song_str)
get_video("compare", audio1, song1_str)

# %%
song_inv = [
    1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,
    1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,
    1, 8/9, 3/5, 4/9, 3/8, 3/5, 4/9, 3/8,
    1, 8/9, 3/5, 4/9, 3/8, 3/5, 4/9, 3/8,
    16/15, 8/9, 2/3, 4/9, 3/8, 2/3, 4/9, 3/8,
    16/15, 8/9, 2/3, 4/9, 3/8, 2/3, 4/9, 3/8,
    1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,
    1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,

    1, 4/5, 3/5, 2/5, 3/10, 3/5, 2/5, 3/10,
    1, 4/5, 3/5, 2/5, 3/10, 3/5, 2/5, 3/10,
    1, 8/9, 5/7, 3/5, 4/9, 5/7, 3/5, 4/9,
    1, 8/9, 5/7, 3/5, 4/9, 5/7, 3/5, 4/9,
    16/15, 8/9, 2/3, 4/9, 1/3, 2/3, 4/9, 1/3,
    16/15, 8/9, 2/3, 4/9, 1/3, 2/3, 4/9, 1/3,
    16/15, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
    16/15, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
    
    6/5, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
    6/5, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
    16/9, 6/5, 8/9, 5/7, 1/2, 8/9, 5/7, 1/2,
    16/9, 6/5, 8/9, 5/7, 1/2, 8/9, 5/7, 1/2,
    4/3, 16/15, 8/9, 2/3, 8/15, 8/9, 2/3, 8/15,
    4/3, 16/15, 8/9, 2/3, 8/15, 8/9, 2/3, 8/15,
    
    4/3, 10/9, 4/5, 2/3, 10/21, 4/5, 2/3, 10/21,
    4/3, 10/9, 4/5, 2/3, 10/21, 4/5, 2/3, 10/21,
    3/2, 6/5, 8/9, 3/5, 4/9, 8/9, 3/5, 4/9,
    3/2, 6/5, 8/9, 3/5, 4/9, 8/9, 3/5, 4/9,
    3/2, 5/4, 8/9, 3/4, 8/15, 8/9, 3/4, 8/15,
    3/2, 5/4, 8/9, 3/4, 8/15, 8/9, 3/4, 8/15,
    8/5, 4/3, 1, 2/3, 1/2, 1, 2/3, 1/2,
    8/5, 4/3, 1, 2/3, 1/2, 1, 2/3, 1/2,

    8/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
    8/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
    9/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
    9/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
    8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
    8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
    2, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
    2, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
    
    2, 4/3, 10/9, 1, 4/5, 10/9, 1, 4/5,
    2, 4/3, 10/9, 1, 4/5, 10/9, 1, 4/5,
    3, 3/2, 6/5, 1, 4/5, 6/5, 1, 4/5,
    3, 3/2, 6/5, 1, 4/5, 6/5, 1, 4/5,
    20/7, 2, 6/5, 1, 5/6, 6/5, 1, 5/6,
    20/7, 2, 6/5, 1, 5/6, 6/5, 1, 5/6,
    5/2, 3/2, 16/15, 1, 8/9, 16/15, 1, 8/9,
    5/2, 3/2, 16/15, 1, 8/9, 16/15, 1, 8/9,

    8/3, 3/2, 4/3, 16/15, 8/9, 4/3, 16/15, 8/9,
    8/3, 3/2, 4/3, 16/15, 8/9, 4/3, 16/15, 8/9,
    8/3, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
    8/3, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
    8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
    8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
    8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
    8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,

    8/3, 5/3, 6/5, 1, 5/7, 6/5, 1, 5/7,
    8/3, 5/3, 6/5, 1, 5/7, 6/5, 1, 5/7,
    8/3, 8/5, 4/3, 1, 2/3, 4/3, 1, 2/3,
    8/3, 8/5, 4/3, 1, 2/3, 4/3, 1, 2/3,
    8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
    8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
    8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
    8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
    
    4, 2, 4/3, 10/9, 4/5, 4/3, 10/9, 4/5,
    4, 2, 4/3, 10/9, 4/5, 4/3, 10/9, 4/5,
    4, 2, 3/2, 6/5, 1, 3/4, 1, 6/5,
    1, 6/5, 3/2, 6/5, 3/2, 9/5, 3/2, 9/5,
    4, 32/15, 2/3, 8/15, 4/9, 3/8, 4/9, 8/15,
    4/9, 8/15, 2/3, 8/15, 8/9, 3/4, 4/5, 8/9,
    1,
]

song_inv_str = '''
1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,
1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,
1, 8/9, 3/5, 4/9, 3/8, 3/5, 4/9, 3/8,
1, 8/9, 3/5, 4/9, 3/8, 3/5, 4/9, 3/8,
16/15, 8/9, 2/3, 4/9, 3/8, 2/3, 4/9, 3/8,
16/15, 8/9, 2/3, 4/9, 3/8, 2/3, 4/9, 3/8,
1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,
1, 4/5, 2/3, 1/2, 2/5, 2/3, 1/2, 2/5,

1, 4/5, 3/5, 2/5, 3/10, 3/5, 2/5, 3/10,
1, 4/5, 3/5, 2/5, 3/10, 3/5, 2/5, 3/10,
1, 8/9, 5/7, 3/5, 4/9, 5/7, 3/5, 4/9,
1, 8/9, 5/7, 3/5, 4/9, 5/7, 3/5, 4/9,
16/15, 8/9, 2/3, 4/9, 1/3, 2/3, 4/9, 1/3,
16/15, 8/9, 2/3, 4/9, 1/3, 2/3, 4/9, 1/3,
16/15, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
16/15, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,

6/5, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
6/5, 1, 4/5, 2/3, 1/2, 4/5, 2/3, 1/2,
16/9, 6/5, 8/9, 5/7, 1/2, 8/9, 5/7, 1/2,
16/9, 6/5, 8/9, 5/7, 1/2, 8/9, 5/7, 1/2,
4/3, 16/15, 8/9, 2/3, 8/15, 8/9, 2/3, 8/15,
4/3, 16/15, 8/9, 2/3, 8/15, 8/9, 2/3, 8/15,

4/3, 10/9, 4/5, 2/3, 10/21, 4/5, 2/3, 10/21,
4/3, 10/9, 4/5, 2/3, 10/21, 4/5, 2/3, 10/21,
3/2, 6/5, 8/9, 3/5, 4/9, 8/9, 3/5, 4/9,
3/2, 6/5, 8/9, 3/5, 4/9, 8/9, 3/5, 4/9,
3/2, 5/4, 8/9, 3/4, 8/15, 8/9, 3/4, 8/15,
3/2, 5/4, 8/9, 3/4, 8/15, 8/9, 3/4, 8/15,
8/5, 4/3, 1, 2/3, 1/2, 1, 2/3, 1/2,
8/5, 4/3, 1, 2/3, 1/2, 1, 2/3, 1/2,

8/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
8/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
9/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
9/5, 3/2, 6/5, 1, 3/4, 6/5, 1, 3/4,
8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
2, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
2, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,

2, 4/3, 10/9, 1, 4/5, 10/9, 1, 4/5,
2, 4/3, 10/9, 1, 4/5, 10/9, 1, 4/5,
3, 3/2, 6/5, 1, 4/5, 6/5, 1, 4/5,
3, 3/2, 6/5, 1, 4/5, 6/5, 1, 4/5,
20/7, 2, 6/5, 1, 5/6, 6/5, 1, 5/6,
20/7, 2, 6/5, 1, 5/6, 6/5, 1, 5/6,
5/2, 3/2, 16/15, 1, 8/9, 16/15, 1, 8/9,
5/2, 3/2, 16/15, 1, 8/9, 16/15, 1, 8/9,

8/3, 3/2, 4/3, 16/15, 8/9, 4/3, 16/15, 8/9,
8/3, 3/2, 4/3, 16/15, 8/9, 4/3, 16/15, 8/9,
8/3, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
8/3, 8/5, 4/3, 1, 4/5, 4/3, 1, 4/5,
8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,

8/3, 5/3, 6/5, 1, 5/7, 6/5, 1, 5/7,
8/3, 5/3, 6/5, 1, 5/7, 6/5, 1, 5/7,
8/3, 8/5, 4/3, 1, 2/3, 4/3, 1, 2/3,
8/3, 8/5, 4/3, 1, 2/3, 4/3, 1, 2/3,
8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
8/3, 16/9, 4/3, 1, 3/4, 4/3, 1, 3/4,
8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,
8/3, 16/9, 4/3, 16/15, 3/4, 4/3, 16/15, 3/4,

4, 2, 4/3, 10/9, 4/5, 4/3, 10/9, 4/5,
4, 2, 4/3, 10/9, 4/5, 4/3, 10/9, 4/5,
4, 2, 3/2, 6/5, 1, 3/4, 1, 6/5,
1, 6/5, 3/2, 6/5, 3/2, 9/5, 3/2, 9/5,
4, 32/15, 2/3, 8/15, 4/9, 3/8, 4/9, 8/15,
4/9, 8/15, 2/3, 8/15, 8/9, 3/4, 4/5, 8/9,
1,
'''

# %%
get_video("inv_pure", render(song_inv, edo=None), song_inv_str)


